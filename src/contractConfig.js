// src/contractConfig.js
// Full, copy-paste version.
//
// This config exports:
// - getReadOnlyProvider(): a JsonRpcProvider for public read-only calls (no MetaMask)
// - getProviderAndSigner(): helper to get provider+signer when user connects MetaMask
// - contractAddress: read from Vite env VITE_CONTRACT_ADDRESS
// - contractABI: ABI of MediCode contract (trimmed/complete ABI here)

import { ethers } from "ethers";

// Read-only Sepolia RPC URL (Vite env uses VITE_ prefix)
export const SEPOLIA_RPC_URL = import.meta.env.VITE_SEPOLIA_RPC_URL || "https://sepolia.infura.io/v3/YOUR_INFURA_PROJECT_ID";

// Contract address (set in Vercel or .env during local dev)
export const contractAddress = import.meta.env.VITE_CONTRACT_ADDRESS || "0xYOUR_DEPLOYED_CONTRACT_ADDRESS";

// Read-only provider for public verification
export function getReadOnlyProvider() {
  return new ethers.JsonRpcProvider(SEPOLIA_RPC_URL);
}

// If user connects MetaMask, we will use window.ethereum / BrowserProvider
export async function getProviderAndSigner() {
  if (!window.ethereum) return { provider: null, signer: null };
  const provider = new ethers.BrowserProvider(window.ethereum);
  await provider.send("eth_requestAccounts", []);
  const signer = await provider.getSigner();
  return { provider, signer };
}

// ====== ABI ======
// Paste the ABI generated by Hardhat here (from artifacts/contracts/MediCode.sol/MediCode.json -> abi)
// I include the full ABI matching the contract you gave earlier.
export const contractABI = [
  {
    "inputs": [],
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "anonymous": false,
    "inputs": [
      { "indexed": true, "internalType": "string", "name": "serialNumber", "type": "string" },
      { "indexed": false, "internalType": "string", "name": "manufacturer", "type": "string" }
    ],
    "name": "DeviceRegistered",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      { "indexed": true, "internalType": "string", "name": "serialNumber", "type": "string" }
    ],
    "name": "DeviceRevoked",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      { "indexed": true, "internalType": "address", "name": "previousOwner", "type": "address" },
      { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }
    ],
    "name": "OwnershipTransferred",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      { "indexed": true, "internalType": "string", "name": "serialNumber", "type": "string" },
      { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }
    ],
    "name": "DeviceOwnershipAssigned",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      { "indexed": true, "internalType": "string", "name": "serialNumber", "type": "string" },
      { "indexed": true, "internalType": "address", "name": "previousOwner", "type": "address" },
      { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }
    ],
    "name": "DeviceOwnershipTransferred",
    "type": "event"
  },
  {
    "inputs": [
      { "internalType": "address", "name": "newOwner", "type": "address" }
    ],
    "name": "changeOwner",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      { "internalType": "string", "name": "_serialNumber", "type": "string" },
      { "internalType": "string", "name": "_productionDate", "type": "string" },
      { "internalType": "string", "name": "_productionLocation", "type": "string" },
      { "internalType": "string", "name": "_manufacturer", "type": "string" },
      { "internalType": "string", "name": "_ipfsHash", "type": "string" }
    ],
    "name": "registerDevice",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      { "internalType": "string", "name": "_serialNumber", "type": "string" }
    ],
    "name": "revokeDevice",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      { "internalType": "string", "name": "_serialNumber", "type": "string" },
      { "internalType": "address", "name": "_newOwner", "type": "address" }
    ],
    "name": "assignDeviceTo",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      { "internalType": "string", "name": "_serialNumber", "type": "string" },
      { "internalType": "address", "name": "_to", "type": "address" }
    ],
    "name": "transferDeviceOwnership",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      { "internalType": "string", "name": "_serialNumber", "type": "string" }
    ],
    "name": "verifyDevice",
    "outputs": [
      { "internalType": "string", "name": "serialNumber", "type": "string" },
      { "internalType": "string", "name": "productionDate", "type": "string" },
      { "internalType": "string", "name": "productionLocation", "type": "string" },
      { "internalType": "string", "name": "manufacturer", "type": "string" },
      { "internalType": "string", "name": "ipfsHash", "type": "string" },
      { "internalType": "bool", "name": "valid", "type": "bool" },
      { "internalType": "address", "name": "deviceOwner", "type": "address" }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "getAllSerials",
    "outputs": [ { "internalType": "string[]", "name": "", "type": "string[]" } ],
    "stateMutability": "view",
    "type": "function"
  }
];
